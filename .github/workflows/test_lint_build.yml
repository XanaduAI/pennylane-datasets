name: "Test and Lint"
on:
  pull_request:
    paths:
      - 'content/**'
      - 'lib/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/worklows/test_lint.yml'
  push:
    branches:
    - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  lint_test_build:
    runs-on: ubuntu-latest
    env:
        PYTHONPATH: "lib/:${PYTHONPATH}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup virtualenv 
        uses: ./.github/actions/setup-venv
        with:
          venv-path: .venv

      - name: Check poetry.lock
        run: .venv/bin/python3 -m poetry lock --check

      - name: Run formatters
        run: |
          .venv/bin/python3 -m ruff check lib/
          .venv/bin/python3 -m ruff format --check lib/

      - name: Run tests
        run: .venv/bin/python3 -m pytest lib/tests/

      - name: Run build
        run: .venv/bin/python3 -m dsets build
      
      - name: Cache build
        uses: actions/cache@v4
        with:
          path: ./_build
          key: ${{ github.sha }}
  
  push_build:
    needs: lint_test_build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging]
    environment: ${{ matrix.environment }}
    env:
        PYTHONPATH: "lib/:${PYTHONPATH}"
        BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
        BUCKET_PUBLIC_DOMAIN: ${{ secrets.BUCKET_PUBLIC_DOMAIN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup virtualenv 
        uses: ./.github/actions/setup-venv
        with:
          venv-path: .venv
      
      - name: Restore cached build
        id: restore-build
        uses: actions/cache/restore@v4
        with:
          path: ./_build
          key: ${{ github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "us-east-1"
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get Branch
        id: get-branch
        shell: bash
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]
          then
            BRANCH=$GITHUB_HEAD_REF
          elif [ "$GITHUB_EVENT_NAME" == "push" ] || [ "$GITHUB_EVENT_NAME" == "release" ]
          then
            BRANCH=${GITHUB_REF##*/}
          else
            printf 'Cannot determine tags: Workflow must be triggered by "push", "pull_request", or "release" event.' && exit 1
          fi

          echo "Branch is '$BRANCH'."
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Get Commit SHA
        id: get-sha
        shell: bash
        run: |
          SHA="${{ github.event.pull_request.head.sha || github.sha }}"
          SHA=${SHA:0:7}
          echo "SHA is '$SHA'."
          echo "sha=$SHA" >> $GITHUB_OUTPUT
      
      - name: Upload assets
        run: .venv/bin/python3 -m dsets upload-assets

      - name: Push build
        run: | 
          .venv/bin/python3 -m dsets push-build --latest \
            ${{ steps.get-branch.outputs.branch }} \
            ${{ steps.get-sha.outputs.sha }}
      
      


